swagger: '2.0'
info:
  description: >-
    The AIOPS Publisher creates a TAR.GZ archive using the raw analyzed data
    from the AI Service, then invokes the Upload service to upload the archive to S3 and produces a message broadcasting
    the URL where the data was uploaded
  version: 1.0.0
  title: AIOPS Publisher
  contact:
    email: support@redhat.com
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
basePath: /
schemes:
  - https
  - http
paths:
  /:
    get:
      operationId: get.root_path
      tags:
      - Liveliness
      description:
        Liveliness
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/RootPath'
      produces:
      - application/json
  /api/v1/version:
    get:
      operationId: get.version
      tags:
      - Version
      description:
        Get the current version
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/Version'
      produces:
      - application/json
  /api/v1/invoke_upload_service:
    post:
      operationId: post.invoke_upload_service
      tags:
        - Upload and Publish
      summary: Specify 'id' and 'data' to upload the data to S3
      description:
        Uploads raw analyzed data to S3 and produces a message broadcasting the URL where the data was uploaded
      responses:
        '200':
          description: On success this API uploads raw analyzed data to S3 and produces a Kafka message on the topic `platform.upload.<ai_service>` with the URL information of where the data was uploaded on S3.
        '413':
          description: This error indicates that the Payload is too large. The user can specify a maximum allowable value for the Payload size in bytes in the Upload Service configuration.
        '415':
          description: This error indicates that the Upload Service did not recognize the Content-Type. Accepted Content-Types are gzipped tarfile, zip file
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: JSON-RPC data
        schema:
          $ref: '#/definitions/InvokeUploadService'
definitions:
  RootPath:
    type: string
    example: 'AIOPS Publisher up and running!'
  Version:
    type: string
    example: 'AIOPS Publisher API Version 1.0.0'
  InvokeUploadService:
    type: object
    description: 'JSON Request Object'
    required:
      - id
      - data
    properties:
      id:
        type: string
        example: '123'
      data:
        example: 'Test Data'
      ai_service:
        type: string
        example: 'generic_ai'
    xml:
      name: InvokeUploadService
